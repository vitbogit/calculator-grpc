// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.0--rc1
// source: div.proto

package div

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DivClient is the client API for Div service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DivClient interface {
	Calculate(ctx context.Context, in *CalculateRequest, opts ...grpc.CallOption) (*CalculateResponse, error)
	CalculateFractional(ctx context.Context, in *CalculateFractionalRequest, opts ...grpc.CallOption) (*CalculateFractionalResponse, error)
}

type divClient struct {
	cc grpc.ClientConnInterface
}

func NewDivClient(cc grpc.ClientConnInterface) DivClient {
	return &divClient{cc}
}

func (c *divClient) Calculate(ctx context.Context, in *CalculateRequest, opts ...grpc.CallOption) (*CalculateResponse, error) {
	out := new(CalculateResponse)
	err := c.cc.Invoke(ctx, "/div.Div/Calculate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *divClient) CalculateFractional(ctx context.Context, in *CalculateFractionalRequest, opts ...grpc.CallOption) (*CalculateFractionalResponse, error) {
	out := new(CalculateFractionalResponse)
	err := c.cc.Invoke(ctx, "/div.Div/CalculateFractional", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DivServer is the server API for Div service.
// All implementations must embed UnimplementedDivServer
// for forward compatibility
type DivServer interface {
	Calculate(context.Context, *CalculateRequest) (*CalculateResponse, error)
	CalculateFractional(context.Context, *CalculateFractionalRequest) (*CalculateFractionalResponse, error)
	mustEmbedUnimplementedDivServer()
}

// UnimplementedDivServer must be embedded to have forward compatible implementations.
type UnimplementedDivServer struct {
}

func (UnimplementedDivServer) Calculate(context.Context, *CalculateRequest) (*CalculateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Calculate not implemented")
}
func (UnimplementedDivServer) CalculateFractional(context.Context, *CalculateFractionalRequest) (*CalculateFractionalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateFractional not implemented")
}
func (UnimplementedDivServer) mustEmbedUnimplementedDivServer() {}

// UnsafeDivServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DivServer will
// result in compilation errors.
type UnsafeDivServer interface {
	mustEmbedUnimplementedDivServer()
}

func RegisterDivServer(s grpc.ServiceRegistrar, srv DivServer) {
	s.RegisterService(&Div_ServiceDesc, srv)
}

func _Div_Calculate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DivServer).Calculate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/div.Div/Calculate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DivServer).Calculate(ctx, req.(*CalculateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Div_CalculateFractional_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateFractionalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DivServer).CalculateFractional(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/div.Div/CalculateFractional",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DivServer).CalculateFractional(ctx, req.(*CalculateFractionalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Div_ServiceDesc is the grpc.ServiceDesc for Div service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Div_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "div.Div",
	HandlerType: (*DivServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Calculate",
			Handler:    _Div_Calculate_Handler,
		},
		{
			MethodName: "CalculateFractional",
			Handler:    _Div_CalculateFractional_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "div.proto",
}
